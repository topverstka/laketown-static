@use 'sass:math';

// @mixin font($fname, $fstyle, $fweight, $furl) {
//   @font-face {
//     font-family: $fname;
//     font-style: $fstyle;
//     font-weight: $fweight;
//     font-stretch: 100%;
//     src: url("#{$furl}.ttf");
//   }
// }

@mixin font($fname, $fstyle, $fweight, $furl) {
  @font-face {
    font-family: $fname;
    font-style: $fstyle;
    font-weight: $fweight;
    font-stretch: 100%;
    src: url("#{$furl}.woff2") format("woff2"),
      url("#{$furl}.woff") format("woff");
    font-display: swap;
  }
}


@mixin transition($obj, $val) {
  -webkit-transition: $obj $val;
  -moz-transition: $obj $val;
  -ms-transition: $obj $val;
  -o-transition: $obj $val;
  transition: $obj $val;
}
@mixin borderRadius($val) {
  -webkit-border-radius: $val;
  -moz-border-radius: $val;
  -ms-border-radius: $val;
  -o-border-radius: $val;
  border-radius: $val;
}

@mixin centerAll {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

@mixin transform($type, $val) {
  -webkit-transform: #{$type}(#{$val});
  -moz-transform: #{$type}(#{$val});
  -ms-transform: #{$type}(#{$val});
  -o-transform: #{$type}(#{$val});
  transform: #{$type}(#{$val});
}

@mixin btnColors($nBorder, $nBgr, $nColor, $hBorder, $hBgr, $hColor) {
  border-color: $nBorder;
  background: $nBgr;
  color: $nColor;
  svg path, span {
    fill: $nColor;
  }
  &:hover {
    border-color: $hBorder;
    background: $hBgr;
    color: $hColor;
    svg path, span {
      fill: $hColor;
    }

  }
}

@mixin paddingSlider($type, $direction) {
  #{$type}-#{$direction}: 100px;
  @media screen and (max-width: $desktop-s - 1) {
    #{$type}-#{$direction}: 80px;
  }
  @media screen and (max-width: $tablet-s - 1) {
    #{$type}-#{$direction}: 20px;
  }
  @media screen and (max-width: $tablet-s - 1) {
    #{$type}-#{$direction}: 15px;
  }
}



@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1px));
  }

  @return $number;
}

@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px) {
  $f-min: strip-unit($f-min);
  $f-max: strip-unit($f-max);
  $w-min: strip-unit($w-min);
  $w-max: strip-unit($w-max);

  $k: math.div(($f-max - $f-min), ($w-max - $w-min));
  $b: $f-min - $k * $w-min;

  $b: $b + $units;

  @return calc( #{$k} * 100vw + #{$b} );
}

@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false, $max-size: false) {

  font-size: $f-min;

  @media (min-width: $w-min) {
    @if ($fallback) {
      font-size: $fallback;
    }
    font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);
  }
  @media (min-width: $w-max) {
    font-size: $f-max;
  }
}



@mixin getSizes($f-min, $f-max, $w-min, $w-max, $min-size: false, $max-size: false) {
  @if ($min-size) {
    @media (max-width: $w-max) {
      font-size: $f-max;
    }
  } @else if ($max-size) {
    @media screen and (min-width: $w-min) {
      font-size: $f-min;
    }
  } @else {
    @media screen and (min-width: $w-min+1)  and (max-width: $w-max) {
      font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);
    }
  }


}



